// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

model Admin {
  id String @id
  userName String @unique
}

model Student{
  id String @id
  userName String @unique
  name String 
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String
  sex UserSex
  createdAt DateTime @default(now())
  birthday  DateTime?
  attendances Attendance[]
  results Result[] 

  parentId String
  parent Parent @relation(fields: [parentId], references: [id])

  classId Int
  class Class @relation(fields: [classId], references: [id])

  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
}

model Teacher{
  id String @id
  userName String @unique
  name String 
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  sex UserSex
  createdAt DateTime @default(now())
  birthday  DateTime?
  subjects Subject[]
  lessons Lesson[]
  classes Class[]
}

model Parent{
  id String @id
  userName String @unique
  name String 
  surname String
  email String? @unique
  phone String @unique
  address String
  createdAt DateTime @default(now())
  students Student[]
}

model Grade{
  id Int @id @default(autoincrement())
  level Int @unique
  students Student[]
  classes Class[]
}

model Class{
  id Int @id @default(autoincrement())
  name String
  capacity Int
  lessons Lesson[]
  students Student[]
  announcements Announcement[]
  events Event[]

  supervisorId String?
  supervisor Teacher? @relation(fields: [supervisorId], references: [id])

  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
}

model Subject{
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}

model Lesson{
  id Int @id @default(autoincrement())
  name String
  day Day
  startTime DateTime
  endTime DateTime
  exams Exam[]
  assignments Assignment[]
  attendances Attendance[]

  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])

  classId Int
  class Class @relation(fields: [classId], references: [id])

  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
}

model Exam{
  id Int @id @default(autoincrement())
  title String
  startTime DateTime
  endTime DateTime
  results Result[]

  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Assignment{
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  dueDate   DateTime?
  results Result[]

  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Result{
  id Int @id @default(autoincrement())
  score Int

  examId Int?
  exam Exam? @relation(fields: [examId], references: [id])

  assignmentId Int?
  assignment Assignment? @relation(fields: [assignmentId], references: [id])

  studentId String
  student Student @relation(fields: [studentId], references: [id])
}

model Attendance{
  id Int @id @default(autoincrement())
  date DateTime
  present Boolean

  studentId String
  student Student @relation(fields: [studentId], references: [id])

  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Event{
  id Int @id @default(autoincrement())
  title String
  description String
  startTime DateTime
  endTime DateTime

  classId Int? 
  class Class? @relation(fields: [classId], references: [id])
}

model Announcement{
  id Int @id @default(autoincrement())
  title String
  description String
  date DateTime

  classId Int? 
  class Class? @relation(fields: [classId], references: [id])
}